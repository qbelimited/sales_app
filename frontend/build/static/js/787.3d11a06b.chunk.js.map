{"version":3,"file":"static/js/787.3d11a06b.chunk.js","mappings":"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","sources":["pages/ManageGenBranchesPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Card, Typography, Button, Modal, TextField } from '@mui/material';\r\nimport { Container, Row, Col, Table, Spinner, Pagination } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport api from '../services/api'; // Axios instance\r\n\r\nconst ManageGenBranchesPage = ({ showToast }) => {\r\n  const [branches, setBranches] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showBranchModal, setShowBranchModal] = useState(false);\r\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [modalMode, setModalMode] = useState('add'); // 'add' or 'edit'\r\n  const [branchData, setBranchData] = useState({ name: '', ghpost_gps: '', address: '', city: '', region: '' });\r\n  const [ghPostError, setGhPostError] = useState(''); // Error state for Ghana Post GPS\r\n\r\n  // Pagination states\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const branchesPerPage = 10;\r\n\r\n  // Fetch current logged-in user and role\r\n  const local_user = JSON.parse(localStorage.getItem('user'));\r\n  const role_id = parseInt(local_user?.role_id) || local_user?.role?.id;\r\n\r\n  // Fetch all branches on component mount and on pagination change\r\n  useEffect(() => {\r\n    const fetchBranches = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await api.get(`/branches/?sort_by=created_at&per_page=${branchesPerPage}&page=${currentPage}`);\r\n        setBranches(response.data.branches);\r\n        setTotalPages(Math.ceil(response.data.total / branchesPerPage)); // Update total pages\r\n      } catch (error) {\r\n        console.error('Error fetching branches:', error);\r\n        showToast('error', 'Failed to fetch branches. Please try again later.', 'Error');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchBranches();\r\n  }, [showToast, currentPage]);\r\n\r\n  // Handle pagination\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  // Handle opening and closing modals\r\n  const handleOpenBranchModal = (mode, branch = null) => {\r\n    setModalMode(mode);\r\n    setGhPostError(''); // Reset error on modal open\r\n    if (mode === 'edit' && branch) {\r\n      setSelectedBranch(branch);\r\n      setBranchData({ name: branch.name, ghpost_gps: branch.ghpost_gps, address: branch.address, city: branch.city, region: branch.region });\r\n    } else {\r\n      setBranchData({ name: '', ghpost_gps: '', address: '', city: '', region: '' });\r\n    }\r\n    setShowBranchModal(true);\r\n  };\r\n\r\n  const handleCloseBranchModal = () => {\r\n    setShowBranchModal(false);\r\n    setSelectedBranch(null);\r\n  };\r\n\r\n  // Handle form submission for adding or editing a branch\r\n  const handleSubmitBranch = async () => {\r\n    // Validate Ghana Post GPS to be exactly 11 characters\r\n    if (branchData.ghpost_gps.length !== 11) {\r\n      setGhPostError('Ghana Post GPS must be exactly 11 characters.');\r\n      return; // Stop form submission if validation fails\r\n    }\r\n\r\n    try {\r\n      if (modalMode === 'add') {\r\n        const response = await api.post('/branches/', branchData); // Add new branch\r\n        setBranches((prevBranches) => [...prevBranches, response.data]);\r\n        showToast('success', 'Branch added successfully.', 'Success');\r\n      } else if (modalMode === 'edit' && selectedBranch) {\r\n        const response = await api.put(`/branches/${selectedBranch.id}`, branchData); // Edit branch\r\n        setBranches((prevBranches) =>\r\n          prevBranches.map((branch) => (branch.id === selectedBranch.id ? response.data : branch))\r\n        );\r\n        showToast('success', 'Branch updated successfully.', 'Success');\r\n      }\r\n      handleCloseBranchModal();\r\n    } catch (error) {\r\n      console.error('Error saving branch:', error);\r\n      showToast('error', 'Failed to save branch. Please try again later.', 'Error');\r\n    }\r\n  };\r\n\r\n  // Handle deleting a branch\r\n  const handleDeleteBranch = async () => {\r\n    if (!selectedBranch) {\r\n      showToast('error', 'No branch selected for deletion.', 'Error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await api.delete(`/branches/${selectedBranch.id}`); // Delete branch\r\n      setBranches((prevBranches) => prevBranches.filter((branch) => branch.id !== selectedBranch.id));\r\n      showToast('success', 'Branch deleted successfully.', 'Success');\r\n      setShowDeleteConfirmation(false);\r\n      setSelectedBranch(null);\r\n    } catch (error) {\r\n      console.error('Error deleting branch:', error);\r\n      showToast('error', 'Failed to delete branch. Please try again later.', 'Error');\r\n    }\r\n  };\r\n\r\n  // Handle opening delete confirmation modal\r\n  const handleShowDeleteConfirmation = (branch) => {\r\n    if (!branch) return;\r\n    setSelectedBranch(branch);\r\n    setShowDeleteConfirmation(true);\r\n  };\r\n\r\n  if (loading) return <Spinner animation=\"border\" />;\r\n\r\n  return (\r\n    <Container className=\"mt-4\">\r\n      <Row>\r\n        <Col md={12}>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            Branch Management\r\n          </Typography>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md={12}>\r\n          {/* Add New Branch Button (visible for specific roles) */}\r\n          {(role_id === 2 || role_id === 3) && (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleOpenBranchModal('add')}\r\n            >\r\n              <FontAwesomeIcon icon={faPlus} /> Add New Branch\r\n            </Button>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"mt-4\">\r\n        <Col md={12}>\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Address</th>\r\n                <th>Ghana Post GPS</th>\r\n                <th>City</th>\r\n                <th>Region</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {branches.map((branch) => (\r\n                <tr key={branch.id}>\r\n                  <td>{branch.name}</td>\r\n                  <td>{branch.address}</td>\r\n                  <td>{branch.ghpost_gps}</td>\r\n                  <td>{branch.city}</td>\r\n                  <td>{branch.region}</td>\r\n                  <td>\r\n                    {/* Edit and Delete buttons (visible for specific roles) */}\r\n                    {(role_id === 2 || role_id === 3) && (\r\n                      <>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          onClick={() => handleOpenBranchModal('edit', branch)}\r\n                          className=\"me-2\"\r\n                        >\r\n                          <FontAwesomeIcon icon={faEdit} /> Edit\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"error\"\r\n                          onClick={() => handleShowDeleteConfirmation(branch)}\r\n                        >\r\n                          <FontAwesomeIcon icon={faTrashAlt} /> Delete\r\n                        </Button>\r\n                      </>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          {/* Pagination */}\r\n          <Pagination>\r\n            {Array.from({ length: totalPages }, (_, index) => (\r\n              <Pagination.Item key={index + 1} active={index + 1 === currentPage} onClick={() => paginate(index + 1)}>\r\n                {index + 1}\r\n              </Pagination.Item>\r\n            ))}\r\n          </Pagination>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Modal for Add/Edit Branch */}\r\n      <Modal\r\n        open={showBranchModal}\r\n        onClose={handleCloseBranchModal}\r\n        style={{ overflow: 'auto' }}\r\n      >\r\n        <Card style={{ width: '50%', margin: '5% auto', padding: '20px', maxHeight: '80vh', overflowY: 'auto' }}>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            {modalMode === 'add' ? 'Add New Branch' : 'Edit Branch'}\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Branch Name\"\r\n            value={branchData.name}\r\n            onChange={(e) => setBranchData({ ...branchData, name: e.target.value })}\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"Address\"\r\n            value={branchData.address}\r\n            onChange={(e) => setBranchData({ ...branchData, address: e.target.value })}\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"Ghana Post GPS\"\r\n            value={branchData.ghpost_gps}\r\n            onChange={(e) => setBranchData({ ...branchData, ghpost_gps: e.target.value })}\r\n            margin=\"normal\"\r\n            error={Boolean(ghPostError)} // Highlight field in red if there's an error\r\n            helperText={ghPostError} // Display error message below the field\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"City\"\r\n            value={branchData.city}\r\n            onChange={(e) => setBranchData({ ...branchData, city: e.target.value })}\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"Region\"\r\n            value={branchData.region}\r\n            onChange={(e) => setBranchData({ ...branchData, region: e.target.value })}\r\n            margin=\"normal\"\r\n          />\r\n          <Row className=\"mt-3\">\r\n            <Col md={6}>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitBranch}>\r\n                Save\r\n              </Button>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Button variant=\"outlined\" color=\"secondary\" onClick={handleCloseBranchModal}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n\r\n      {/* Delete Confirmation Modal */}\r\n      <Modal\r\n        open={showDeleteConfirmation}\r\n        onClose={() => setShowDeleteConfirmation(false)}\r\n        style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n      >\r\n        <Card style={{ padding: '20px' }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Are you sure you want to delete this branch?\r\n          </Typography>\r\n          <Row className=\"mt-3\">\r\n            <Col md={6}>\r\n              <Button variant=\"contained\" color=\"error\" onClick={handleDeleteBranch}>\r\n                Delete\r\n              </Button>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Button variant=\"outlined\" color=\"secondary\" onClick={() => setShowDeleteConfirmation(false)}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ManageGenBranchesPage;\r\n"],"names":["_ref","_local_user$role","showToast","branches","setBranches","useState","loading","setLoading","showBranchModal","setShowBranchModal","showDeleteConfirmation","setShowDeleteConfirmation","selectedBranch","setSelectedBranch","modalMode","setModalMode","branchData","setBranchData","name","ghpost_gps","address","city","region","ghPostError","setGhPostError","currentPage","setCurrentPage","totalPages","setTotalPages","local_user","JSON","parse","localStorage","getItem","role_id","parseInt","role","id","useEffect","async","response","api","get","data","Math","ceil","total","error","console","fetchBranches","handleOpenBranchModal","mode","branch","arguments","length","undefined","handleCloseBranchModal","_jsx","Spinner","animation","_jsxs","Container","className","children","Row","Col","md","Typography","variant","gutterBottom","Button","color","onClick","FontAwesomeIcon","icon","faPlus","Table","striped","bordered","hover","map","_Fragment","faEdit","handleShowDeleteConfirmation","faTrashAlt","Pagination","Array","from","_","index","Item","active","Modal","open","onClose","style","overflow","Card","width","margin","padding","maxHeight","overflowY","TextField","fullWidth","label","value","onChange","e","target","Boolean","helperText","post","prevBranches","put","display","alignItems","justifyContent","delete","filter"],"sourceRoot":""}