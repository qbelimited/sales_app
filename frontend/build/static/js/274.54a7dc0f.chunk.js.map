{"version":3,"file":"static/js/274.54a7dc0f.chunk.js","mappings":"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","sources":["components/SessionTable.js","pages/ManageSessionsPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useUser } from '../contexts/UserContext';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nconst SessionTable = ({ showToast, onEndSession }) => {\r\n  const { sessions, loading } = useUser(); // Access sessions from UserContext\r\n  const [viewAllSessionsForUser, setViewAllSessionsForUser] = useState(null);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n  const [sessionToDelete, setSessionToDelete] = useState(null);\r\n  const [visibleInactiveSessions, setVisibleInactiveSessions] = useState({}); // Track which user's inactive sessions are visible\r\n\r\n  if (loading) {\r\n    return <p>Loading sessions...</p>;\r\n  }\r\n\r\n  // Get unique users from sessions\r\n  const uniqueUsers = Array.from(new Set(sessions.map(session => session.user_id)))\r\n    .map(userId => {\r\n      return sessions.find(session => session.user_id === userId);\r\n    })\r\n    .sort((a, b) => {\r\n      // Sort by active session count descending\r\n      const aActiveCount = sessions.filter(session => session.user_id === a.user_id && session.is_active).length;\r\n      const bActiveCount = sessions.filter(session => session.user_id === b.user_id && session.is_active).length;\r\n      return bActiveCount - aActiveCount;\r\n    });\r\n\r\n  // Filter sessions for a specific user\r\n  const filterSessionsForUser = (userId, isActive = true) => {\r\n    return sessions.filter(session => session.user_id === userId && session.is_active === isActive);\r\n  };\r\n\r\n  // Calculate session duration\r\n  const calculateSessionDuration = (loginTime, logoutTime) => {\r\n    if (logoutTime) {\r\n      const duration = new Date(logoutTime) - new Date(loginTime);\r\n      return `${Math.floor(duration / 60000)} minutes`;\r\n    }\r\n    return 'Active';\r\n  };\r\n\r\n  const handleDeleteSession = (sessionId, userId) => {\r\n    setSessionToDelete({ sessionId, userId });\r\n    setShowConfirmModal(true);\r\n  };\r\n\r\n  const confirmDeleteSession = async () => {\r\n    if (sessionToDelete) {\r\n      await onEndSession(sessionToDelete.sessionId, sessionToDelete.userId);\r\n      showToast('success', 'Session ended successfully.', 'Success'); // Show success toast after deletion\r\n      setShowConfirmModal(false);\r\n      setSessionToDelete(null);\r\n    }\r\n  };\r\n\r\n  const toggleInactiveSessions = (userId) => {\r\n    setVisibleInactiveSessions(prevState => ({\r\n      ...prevState,\r\n      [userId]: !prevState[userId]\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {viewAllSessionsForUser ? (\r\n        <div>\r\n          <button\r\n            className=\"btn btn-secondary mb-3\"\r\n            onClick={() => setViewAllSessionsForUser(null)}\r\n          >\r\n            Back to All Users\r\n          </button>\r\n          <table className=\"table table-striped\">\r\n            <thead>\r\n              <tr>\r\n                <th>Session ID</th>\r\n                <th>User Name</th>\r\n                <th>Login Time</th>\r\n                <th>Logout Time</th>\r\n                <th>Session Duration</th>\r\n                <th>IP Address</th>\r\n                <th>Status</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filterSessionsForUser(viewAllSessionsForUser).map((session) => (\r\n                <tr key={session.id}>\r\n                  <td>{session.id}</td>\r\n                  <td>{session.user_name}</td>\r\n                  <td>{new Date(session.login_time).toLocaleString()}</td>\r\n                  <td>{session.logout_time ? new Date(session.logout_time).toLocaleString() : 'Active'}</td>\r\n                  <td>{calculateSessionDuration(session.login_time, session.logout_time)}</td>\r\n                  <td>{session.ip_address}</td>\r\n                  <td>{session.is_active ? 'Active' : 'Inactive'}</td>\r\n                  <td>\r\n                    {session.is_active && (\r\n                      <button\r\n                        className=\"btn btn-danger btn-sm\"\r\n                        onClick={() => handleDeleteSession(session.id, session.user_id)} // Trigger delete confirmation\r\n                      >\r\n                        End Session\r\n                      </button>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n              {/* Render Inactive Sessions */}\r\n              {visibleInactiveSessions[viewAllSessionsForUser] && (\r\n                filterSessionsForUser(viewAllSessionsForUser, false).map((session) => (\r\n                  <tr key={session.id} className=\"table-secondary\">\r\n                    <td>{session.id}</td>\r\n                    <td>{session.user_name}</td>\r\n                    <td>{new Date(session.login_time).toLocaleString()}</td>\r\n                    <td>{session.logout_time ? new Date(session.logout_time).toLocaleString() : 'Active'}</td>\r\n                    <td>{calculateSessionDuration(session.login_time, session.logout_time)}</td>\r\n                    <td>{session.ip_address}</td>\r\n                    <td>{session.is_active ? 'Active' : 'Inactive'}</td>\r\n                    <td>N/A</td>\r\n                  </tr>\r\n                ))\r\n              )}\r\n            </tbody>\r\n          </table>\r\n          <button\r\n            className=\"btn btn-info btn-sm\"\r\n            onClick={() => toggleInactiveSessions(viewAllSessionsForUser)}\r\n          >\r\n            {visibleInactiveSessions[viewAllSessionsForUser] ? 'Hide Inactive Sessions' : 'Show Inactive Sessions'}\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <table className=\"table table-striped\">\r\n          <thead>\r\n            <tr>\r\n              <th>User Name</th>\r\n              <th>Active Sessions Count</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {uniqueUsers.length > 0 ? (\r\n              uniqueUsers.map(user => (\r\n                <tr key={user.user_id}>\r\n                  <td>{user.user_name}</td>\r\n                  <td>{filterSessionsForUser(user.user_id).length}</td>\r\n                  <td>\r\n                    <button\r\n                      className=\"btn btn-info btn-sm\"\r\n                      onClick={() => setViewAllSessionsForUser(user.user_id)}\r\n                    >\r\n                      View All Sessions\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"3\">No users with active sessions found.</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n\r\n      {/* Confirmation Modal */}\r\n      <Modal show={showConfirmModal} onHide={() => setShowConfirmModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Confirm Deletion</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <p>Are you sure you want to end this session? This action cannot be undone.</p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowConfirmModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={confirmDeleteSession}>\r\n            End Session\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SessionTable;\r\n","import React, { useState, useEffect, useCallback } from 'react';\r\nimport api from '../services/api';\r\nimport SessionTable from '../components/SessionTable';\r\nimport Loading from '../components/Loading';\r\n\r\nconst ManageSessionsPage = ({ showToast }) => {\r\n  const [sessions, setSessions] = useState([]); // Local state for sessions\r\n  const [loadingSessions, setLoadingSessions] = useState(true); // Local loading state\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch all user sessions\r\n  const fetchSessions = useCallback(async () => {\r\n    setLoadingSessions(true);\r\n    const timeoutId = setTimeout(() => {\r\n      showToast('warning', 'Fetching sessions is taking longer than expected.', 'Warning');\r\n    }, 5000);\r\n\r\n    try {\r\n      const response = await api.get('/users/sessions');\r\n      setSessions(response.data.sessions);\r\n    } catch (error) {\r\n      console.error('Error fetching sessions:', error);\r\n      setError('Failed to fetch user sessions.');\r\n      showToast('danger', 'Failed to fetch user sessions.', 'Error');\r\n    } finally {\r\n      setLoadingSessions(false);\r\n      clearTimeout(timeoutId);\r\n    }\r\n  }, [showToast]);\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, [fetchSessions]);\r\n\r\n  // Handler to end a session\r\n  const handleEndSession = async (sessionId, userId) => {\r\n    try {\r\n      await api.delete(`/users/${userId}/sessions/${sessionId}`);\r\n      showToast('success', 'Session ended successfully.', 'Success');\r\n      fetchSessions(); // Refresh session list\r\n    } catch (error) {\r\n      console.error('Error ending session:', error);\r\n      showToast('danger', 'Failed to end the session.', 'Error');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h1 className=\"text-center mb-4\">Manage User Sessions</h1>\r\n      {loadingSessions ? (\r\n        <Loading />\r\n      ) : (\r\n        <SessionTable\r\n          sessions={sessions}\r\n          onEndSession={handleEndSession}\r\n          showToast={showToast}\r\n        />\r\n      )}\r\n      {error && <p className=\"text-danger\">{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ManageSessionsPage;\r\n"],"names":["_ref","showToast","onEndSession","sessions","loading","useUser","viewAllSessionsForUser","setViewAllSessionsForUser","useState","showConfirmModal","setShowConfirmModal","sessionToDelete","setSessionToDelete","visibleInactiveSessions","setVisibleInactiveSessions","_jsx","children","uniqueUsers","Array","from","Set","map","session","user_id","userId","find","sort","a","b","aActiveCount","filter","is_active","length","filterSessionsForUser","isActive","arguments","undefined","calculateSessionDuration","loginTime","logoutTime","duration","Date","Math","floor","_jsxs","className","onClick","id","user_name","login_time","toLocaleString","logout_time","ip_address","handleDeleteSession","sessionId","toggleInactiveSessions","prevState","user","colSpan","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","async","setSessions","loadingSessions","setLoadingSessions","error","setError","fetchSessions","useCallback","timeoutId","setTimeout","response","api","get","data","console","clearTimeout","useEffect","Loading","SessionTable","delete"],"sourceRoot":""}