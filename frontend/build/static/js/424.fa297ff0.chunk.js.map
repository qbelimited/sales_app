{"version":3,"file":"static/js/424.fa297ff0.chunk.js","mappings":"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","sources":["pages/ManagePaypointsPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Card, Typography, Button, Modal, TextField } from '@mui/material';\r\nimport { Container, Row, Col, Table, Spinner, Pagination } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faEdit, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport api from '../services/api'; // Axios instance\r\n\r\nconst ManagePaypointsPage = ({ showToast }) => {\r\n  const [paypoints, setPaypoints] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showPaypointModal, setShowPaypointModal] = useState(false);\r\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n  const [selectedPaypoint, setSelectedPaypoint] = useState(null);\r\n  const [modalMode, setModalMode] = useState('add'); // 'add' or 'edit'\r\n  const [paypointData, setPaypointData] = useState({ name: '', location: '' });\r\n\r\n  // Pagination states\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  const paypointsPerPage = 10;\r\n\r\n  // Fetch current logged-in user and role\r\n  const local_user = JSON.parse(localStorage.getItem('user'));\r\n  const role_id = parseInt(local_user?.role_id) || local_user?.role?.id;\r\n\r\n  // Fetch all paypoints on component mount and on pagination change\r\n  useEffect(() => {\r\n    const fetchPaypoints = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await api.get(`/paypoints/?sort_by=created_at&per_page=${paypointsPerPage}&page=${currentPage}`);\r\n        setPaypoints(response.data.paypoints);\r\n        setTotalPages(Math.ceil(response.data.total / paypointsPerPage)); // Update total pages\r\n      } catch (error) {\r\n        console.error('Error fetching paypoints:', error);\r\n        showToast('error', 'Failed to fetch paypoints. Please try again later.', 'Error');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchPaypoints();\r\n  }, [showToast, currentPage]);\r\n\r\n  // Handle pagination\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  // Handle opening and closing modals\r\n  const handleOpenPaypointModal = (mode, paypoint = null) => {\r\n    setModalMode(mode);\r\n    if (mode === 'edit' && paypoint) {\r\n      setSelectedPaypoint(paypoint);\r\n      setPaypointData({ name: paypoint.name, location: paypoint.location });\r\n    } else {\r\n      setPaypointData({ name: '', location: '' });\r\n    }\r\n    setShowPaypointModal(true);\r\n  };\r\n\r\n  const handleClosePaypointModal = () => {\r\n    setShowPaypointModal(false);\r\n    setSelectedPaypoint(null);\r\n  };\r\n\r\n  // Handle form submission for adding or editing a paypoint\r\n  const handleSubmitPaypoint = async () => {\r\n    try {\r\n      if (modalMode === 'add') {\r\n        const response = await api.post('/paypoints/', paypointData); // Add new paypoint\r\n        setPaypoints((prevPaypoints) => [...prevPaypoints, response.data]);\r\n        showToast('success', 'Paypoint added successfully.', 'Success');\r\n      } else if (modalMode === 'edit' && selectedPaypoint) {\r\n        const response = await api.put(`/paypoints/${selectedPaypoint.id}`, paypointData); // Edit paypoint\r\n        setPaypoints((prevPaypoints) =>\r\n          prevPaypoints.map((paypoint) => (paypoint.id === selectedPaypoint.id ? response.data : paypoint))\r\n        );\r\n        showToast('success', 'Paypoint updated successfully.', 'Success');\r\n      }\r\n      handleClosePaypointModal();\r\n    } catch (error) {\r\n      console.error('Error saving paypoint:', error);\r\n      showToast('error', 'Failed to save paypoint. Please try again later.', 'Error');\r\n    }\r\n  };\r\n\r\n  // Handle deleting a paypoint\r\n  const handleDeletePaypoint = async () => {\r\n    if (!selectedPaypoint) {\r\n      showToast('error', 'No paypoint selected for deletion.', 'Error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await api.delete(`/paypoints/${selectedPaypoint.id}`); // Delete paypoint\r\n      setPaypoints((prevPaypoints) => prevPaypoints.filter((paypoint) => paypoint.id !== selectedPaypoint.id));\r\n      showToast('success', 'Paypoint deleted successfully.', 'Success');\r\n      setShowDeleteConfirmation(false);\r\n      setSelectedPaypoint(null);\r\n    } catch (error) {\r\n      console.error('Error deleting paypoint:', error);\r\n      showToast('error', 'Failed to delete paypoint. Please try again later.', 'Error');\r\n    }\r\n  };\r\n\r\n  // Handle opening delete confirmation modal\r\n  const handleShowDeleteConfirmation = (paypoint) => {\r\n    if (!paypoint) return;\r\n    setSelectedPaypoint(paypoint);\r\n    setShowDeleteConfirmation(true);\r\n  };\r\n\r\n  if (loading) return <Spinner animation=\"border\" />;\r\n\r\n  return (\r\n    <Container className=\"mt-4\">\r\n      <Row>\r\n        <Col md={12}>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            Paypoint Management\r\n          </Typography>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col md={12}>\r\n          {/* Add New Paypoint Button (visible for specific roles) */}\r\n          {(role_id === 2 || role_id === 3) && (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleOpenPaypointModal('add')}\r\n            >\r\n              <FontAwesomeIcon icon={faPlus} /> Add New Paypoint\r\n            </Button>\r\n          )}\r\n        </Col>\r\n      </Row>\r\n\r\n      <Row className=\"mt-4\">\r\n        <Col md={12}>\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Location</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {paypoints.map((paypoint) => (\r\n                <tr key={paypoint.id}>\r\n                  <td>{paypoint.name}</td>\r\n                  <td>{paypoint.location}</td>\r\n                  <td>\r\n                    {/* Edit and Delete buttons (visible for specific roles) */}\r\n                    {(role_id === 2 || role_id === 3) && (\r\n                      <>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          onClick={() => handleOpenPaypointModal('edit', paypoint)}\r\n                          className=\"me-2\"\r\n                        >\r\n                          <FontAwesomeIcon icon={faEdit} /> Edit\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"error\"\r\n                          onClick={() => handleShowDeleteConfirmation(paypoint)}\r\n                        >\r\n                          <FontAwesomeIcon icon={faTrashAlt} /> Delete\r\n                        </Button>\r\n                      </>\r\n                    )}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          {/* Pagination */}\r\n          <Pagination>\r\n            {Array.from({ length: totalPages }, (_, index) => (\r\n              <Pagination.Item key={index + 1} active={index + 1 === currentPage} onClick={() => paginate(index + 1)}>\r\n                {index + 1}\r\n              </Pagination.Item>\r\n            ))}\r\n          </Pagination>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Modal for Add/Edit Paypoint */}\r\n      <Modal\r\n        open={showPaypointModal}\r\n        onClose={handleClosePaypointModal}\r\n        style={{ overflow: 'auto' }}\r\n      >\r\n        <Card style={{ width: '50%', margin: '5% auto', padding: '20px', maxHeight: '80vh', overflowY: 'auto' }}>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            {modalMode === 'add' ? 'Add New Paypoint' : 'Edit Paypoint'}\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Paypoint Name\"\r\n            value={paypointData.name}\r\n            onChange={(e) => setPaypointData({ ...paypointData, name: e.target.value })}\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"Location\"\r\n            value={paypointData.location}\r\n            onChange={(e) => setPaypointData({ ...paypointData, location: e.target.value })}\r\n            margin=\"normal\"\r\n          />\r\n          <Row className=\"mt-3\">\r\n            <Col md={6}>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitPaypoint}>\r\n                Save\r\n              </Button>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Button variant=\"outlined\" color=\"secondary\" onClick={handleClosePaypointModal}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n\r\n      {/* Delete Confirmation Modal */}\r\n      <Modal\r\n        open={showDeleteConfirmation}\r\n        onClose={() => setShowDeleteConfirmation(false)}\r\n        style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n      >\r\n        <Card style={{ padding: '20px' }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Are you sure you want to delete this paypoint?\r\n          </Typography>\r\n          <Row className=\"mt-3\">\r\n            <Col md={6}>\r\n              <Button variant=\"contained\" color=\"error\" onClick={handleDeletePaypoint}>\r\n                Delete\r\n              </Button>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Button variant=\"outlined\" color=\"secondary\" onClick={() => setShowDeleteConfirmation(false)}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ManagePaypointsPage;\r\n"],"names":["_ref","_local_user$role","showToast","paypoints","setPaypoints","useState","loading","setLoading","showPaypointModal","setShowPaypointModal","showDeleteConfirmation","setShowDeleteConfirmation","selectedPaypoint","setSelectedPaypoint","modalMode","setModalMode","paypointData","setPaypointData","name","location","currentPage","setCurrentPage","totalPages","setTotalPages","local_user","JSON","parse","localStorage","getItem","role_id","parseInt","role","id","useEffect","async","response","api","get","data","Math","ceil","total","error","console","fetchPaypoints","handleOpenPaypointModal","mode","paypoint","arguments","length","undefined","handleClosePaypointModal","_jsx","Spinner","animation","_jsxs","Container","className","children","Row","Col","md","Typography","variant","gutterBottom","Button","color","onClick","FontAwesomeIcon","icon","faPlus","Table","striped","bordered","hover","map","_Fragment","faEdit","handleShowDeleteConfirmation","faTrashAlt","Pagination","Array","from","_","index","Item","active","Modal","open","onClose","style","overflow","Card","width","margin","padding","maxHeight","overflowY","TextField","fullWidth","label","value","onChange","e","target","post","prevPaypoints","put","display","alignItems","justifyContent","delete","filter"],"sourceRoot":""}