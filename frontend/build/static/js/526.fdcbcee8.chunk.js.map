{"version":3,"file":"static/js/526.fdcbcee8.chunk.js","mappings":"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","sources":["pages/ManageBanksPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Card, Typography, Button, Modal, TextField } from '@mui/material';\r\nimport { Container, Row, Col, Table, Spinner, Pagination } from 'react-bootstrap';\r\nimport api from '../services/api'; // Axios instance\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faEdit, faTrashAlt, faSitemap } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ManageBanksPage = ({ showToast }) => {\r\n  const [banks, setBanks] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [showBankModal, setShowBankModal] = useState(false);\r\n  const [showBranchModal, setShowBranchModal] = useState(false);\r\n  const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);\r\n  const [showEditBranchModal, setShowEditBranchModal] = useState(false);\r\n  const [showDeleteBranchConfirmation, setShowDeleteBranchConfirmation] = useState(false);\r\n  const [selectedBank, setSelectedBank] = useState(null);\r\n  const [selectedBranch, setSelectedBranch] = useState(null);\r\n  const [modalMode, setModalMode] = useState('add'); // 'add' or 'edit'\r\n  const [bankData, setBankData] = useState({ name: '' });\r\n  const [branchData, setBranchData] = useState({ name: '', sort_code: '' });\r\n  const [branches, setBranches] = useState([]);\r\n\r\n  // Pagination states\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const banksPerPage = 10;\r\n\r\n  // Fetch current logged-in user and role\r\n  const local_user = JSON.parse(localStorage.getItem('user'));\r\n  const role_id = parseInt(local_user?.role_id) || local_user?.role?.id;\r\n\r\n  // Fetch all banks on component mount\r\n  useEffect(() => {\r\n    const fetchBanks = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await api.get('/bank/'); // Fetch banks from API\r\n        setBanks(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching banks:', error);\r\n        showToast('error', 'Failed to fetch banks. Please try again later.', 'Error');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    fetchBanks();\r\n  }, [showToast]);\r\n\r\n  // Handle pagination\r\n  const indexOfLastBank = currentPage * banksPerPage;\r\n  const indexOfFirstBank = indexOfLastBank - banksPerPage;\r\n  const currentBanks = banks.slice(indexOfFirstBank, indexOfLastBank);\r\n\r\n  const paginate = (pageNumber) => setCurrentPage(pageNumber);\r\n\r\n  // Handle opening and closing modals\r\n  const handleOpenBankModal = (mode, bank = null) => {\r\n    setModalMode(mode);\r\n    if (mode === 'edit' && bank) {\r\n      setSelectedBank(bank);\r\n      setBankData({ name: bank.name });\r\n    } else {\r\n      setBankData({ name: '' });\r\n    }\r\n    setShowBankModal(true);\r\n  };\r\n\r\n  const handleCloseBankModal = () => {\r\n    setShowBankModal(false);\r\n    setSelectedBank(null);\r\n  };\r\n\r\n  const handleOpenBranchModal = (bank) => {\r\n    setSelectedBank(bank);\r\n    setBranches(bank.bank_branches || []);\r\n    setShowBranchModal(true);\r\n  };\r\n\r\n  const handleCloseBranchModal = () => {\r\n    setShowBranchModal(false);\r\n    setBranchData({ name: '', sort_code: '' });\r\n  };\r\n\r\n  // Handle form submission for adding or editing a bank\r\n  const handleSubmitBank = async () => {\r\n    try {\r\n      if (modalMode === 'add') {\r\n        const response = await api.post('/bank/', bankData); // Add new bank\r\n        setBanks((prevBanks) => [...prevBanks, response.data]);\r\n        showToast('success', 'Bank added successfully.', 'Success');\r\n      } else if (modalMode === 'edit' && selectedBank) {\r\n        const response = await api.put(`/bank/${selectedBank.id}`, bankData); // Edit bank\r\n        setBanks((prevBanks) =>\r\n          prevBanks.map((bank) => (bank.id === selectedBank.id ? response.data : bank))\r\n        );\r\n        showToast('success', 'Bank updated successfully.', 'Success');\r\n      }\r\n      handleCloseBankModal();\r\n    } catch (error) {\r\n      console.error('Error saving bank:', error);\r\n      showToast('error', 'Failed to save bank. Please try again later.', 'Error');\r\n    }\r\n  };\r\n\r\n  // Handle deleting a bank and its branches\r\n  const handleDeleteBank = async () => {\r\n    if (!selectedBank) {\r\n      showToast('error', 'No bank selected for deletion.', 'Error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await api.delete(`/bank/${selectedBank.id}`); // Delete bank\r\n      setBanks((prevBanks) => prevBanks.filter((bank) => bank.id !== selectedBank.id));\r\n      showToast('success', 'Bank deleted successfully.', 'Success');\r\n      setShowDeleteConfirmation(false);\r\n      setSelectedBank(null);\r\n    } catch (error) {\r\n      console.error('Error deleting bank:', error);\r\n      showToast('error', 'Failed to delete bank. Please try again later.', 'Error');\r\n    }\r\n  };\r\n\r\n  // Handle opening delete confirmation modal\r\n  const handleShowDeleteConfirmation = (bank) => {\r\n    if (!bank) return;\r\n    setSelectedBank(bank);\r\n    setShowDeleteConfirmation(true);\r\n  };\r\n\r\n  // Handle adding or editing branches\r\n  const handleBranchSubmit = async () => {\r\n    if (!selectedBank) {\r\n      showToast('error', 'No bank selected for branch operation.', 'Error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (modalMode === 'add') {\r\n        const response = await api.post(`/bank/bank-branches`, {\r\n          bank_id: selectedBank.id, // Pass the selected bank's ID\r\n          name: branchData.name,\r\n          sort_code: branchData.sort_code,\r\n          is_deleted: false\r\n        });\r\n        setBranches((prevBranches) => [...prevBranches, response.data]);\r\n        showToast('success', 'Branch added successfully.', 'Success');\r\n      } else if (modalMode === 'edit' && selectedBranch) {\r\n        const response = await api.put(`/bank/bank-branches/${selectedBranch.id}`, branchData); // Edit branch\r\n        setBranches((prevBranches) =>\r\n          prevBranches.map((branch) =>\r\n            branch.id === selectedBranch.id ? response.data : branch\r\n          )\r\n        );\r\n        showToast('success', 'Branch updated successfully.', 'Success');\r\n      }\r\n      setShowEditBranchModal(false);\r\n    } catch (error) {\r\n      console.error('Error saving branch:', error);\r\n      showToast('error', 'Failed to save branch. Please try again later.', 'Error');\r\n    }\r\n  };\r\n\r\n  // Handle opening edit branch modal\r\n  const handleEditBranch = (branch) => {\r\n    if (!branch) return;\r\n    setBranchData({ name: branch.name, sort_code: branch.sort_code, id: branch.id });\r\n    setSelectedBranch(branch);\r\n    setModalMode('edit');\r\n    setShowEditBranchModal(true);\r\n  };\r\n\r\n  // Handle deleting a branch\r\n  const handleDeleteBranch = async () => {\r\n    if (!selectedBranch) {\r\n      showToast('error', 'No branch selected for deletion.', 'Error');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await api.delete(`/bank/bank-branches/${selectedBranch.id}`); // Delete branch\r\n      setBranches((prevBranches) => prevBranches.filter((branch) => branch.id !== selectedBranch.id));\r\n      showToast('success', 'Branch deleted successfully.', 'Success');\r\n      setShowDeleteBranchConfirmation(false);\r\n      setSelectedBranch(null);\r\n    } catch (error) {\r\n      console.error('Error deleting branch:', error);\r\n      showToast('error', 'Failed to delete branch. Please try again later.', 'Error');\r\n    }\r\n  };\r\n\r\n  // Handle opening delete branch confirmation modal\r\n  const handleShowDeleteBranchConfirmation = (branch) => {\r\n    if (!branch) return;\r\n    setSelectedBranch(branch);\r\n    setShowDeleteBranchConfirmation(true);\r\n  };\r\n\r\n  if (loading) return <Spinner animation=\"border\" />;\r\n\r\n  return (\r\n    <Container className=\"mt-4\">\r\n      <Row>\r\n        <Col md={12}>\r\n          <Typography variant=\"h4\" gutterBottom>\r\n            Bank and Branch Management\r\n          </Typography>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Add New Bank Button (visible for specific roles) */}\r\n      {role_id === 2 || role_id === 3 ? (\r\n        <Row>\r\n          <Col md={12}>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => handleOpenBankModal('add')}\r\n            >\r\n              <FontAwesomeIcon icon={faPlus} /> Add New Bank\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      ) : null}\r\n\r\n      <Row className=\"mt-4\">\r\n        <Col md={12}>\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {currentBanks.map((bank) => (\r\n                <tr key={bank.id}>\r\n                  <td>{bank.name}</td>\r\n                  <td>\r\n                    {/* Edit and Delete buttons (visible for specific roles) */}\r\n                    {role_id === 2 || role_id === 3 ? (\r\n                      <>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          onClick={() => handleOpenBankModal('edit', bank)}\r\n                          className=\"me-2\"\r\n                        >\r\n                          <FontAwesomeIcon icon={faEdit} /> Edit\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"error\"\r\n                          onClick={() => handleShowDeleteConfirmation(bank)}\r\n                        >\r\n                          <FontAwesomeIcon icon={faTrashAlt} /> Delete\r\n                        </Button>\r\n                      </>\r\n                    ) : null}\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"info\"\r\n                      onClick={() => handleOpenBranchModal(bank)}\r\n                      className=\"ms-2\"\r\n                    >\r\n                      <FontAwesomeIcon icon={faSitemap} /> Manage Branches\r\n                    </Button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          {/* Pagination */}\r\n          <Pagination>\r\n            {Array.from({ length: Math.ceil(banks.length / banksPerPage) }, (_, index) => (\r\n              <Pagination.Item key={index + 1} active={index + 1 === currentPage} onClick={() => paginate(index + 1)}>\r\n                {index + 1}\r\n              </Pagination.Item>\r\n            ))}\r\n          </Pagination>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* Modal for Add/Edit Bank */}\r\n      <Modal\r\n        open={showBankModal}\r\n        onClose={handleCloseBankModal}\r\n        style={{ overflow: 'auto' }}\r\n      >\r\n        <Card style={{ width: '50%', margin: '5% auto', padding: '20px', maxHeight: '80vh', overflowY: 'auto' }}>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            {modalMode === 'add' ? 'Add New Bank' : 'Edit Bank'}\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Bank Name\"\r\n            value={bankData.name}\r\n            onChange={(e) => setBankData({ ...bankData, name: e.target.value })}\r\n            margin=\"normal\"\r\n          />\r\n          <Row className=\"mt-3\">\r\n            <Col md={6}>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={handleSubmitBank}>\r\n                Save\r\n              </Button>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Button variant=\"outlined\" color=\"secondary\" onClick={handleCloseBankModal}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n\r\n      {/* Modal for Managing Branches */}\r\n      <Modal\r\n        open={showBranchModal}\r\n        onClose={handleCloseBranchModal}\r\n        style={{ overflow: 'auto' }}\r\n      >\r\n        <Card style={{ width: '70%', margin: '3% auto', padding: '20px', maxHeight: '80vh', overflowY: 'auto' }}>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            Manage Branches for {selectedBank?.name}\r\n          </Typography>\r\n          <Table striped bordered hover>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Sort Code</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {branches.map((branch) => (\r\n                <tr key={branch.id}>\r\n                  <td>{branch.name}</td>\r\n                  <td>{branch.sort_code}</td>\r\n                  <td>\r\n                    {/* Edit and Delete buttons (visible for specific roles) */}\r\n                    {role_id === 2 || role_id === 3 ? (\r\n                      <>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          onClick={() => handleEditBranch(branch)}\r\n                          className=\"me-2\"\r\n                        >\r\n                          <FontAwesomeIcon icon={faEdit} /> Edit\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"error\"\r\n                          onClick={() => handleShowDeleteBranchConfirmation(branch)}\r\n                        >\r\n                          <FontAwesomeIcon icon={faTrashAlt} /> Delete\r\n                        </Button>\r\n                      </>\r\n                    ) : null}\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </Table>\r\n          {/* Add New Branch Button (visible for specific roles) */}\r\n          {role_id === 2 || role_id === 3 ? (\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() => {\r\n                setBranchData({ name: '', sort_code: '' }); // Reset branch data for adding new branch\r\n                setModalMode('add');\r\n                setShowEditBranchModal(true);\r\n              }}\r\n              className=\"mt-3\"\r\n            >\r\n              <FontAwesomeIcon icon={faPlus} /> Add New Branch\r\n            </Button>\r\n          ) : null}\r\n        </Card>\r\n      </Modal>\r\n\r\n      {/* Modal for Editing Branch */}\r\n      <Modal\r\n        open={showEditBranchModal}\r\n        onClose={() => setShowEditBranchModal(false)}\r\n        style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n      >\r\n        <Card style={{ width: '30%', padding: '20px' }}>\r\n          <Typography variant=\"h5\" gutterBottom>\r\n            {modalMode === 'add' ? 'Add Branch' : 'Edit Branch'}\r\n          </Typography>\r\n          <TextField\r\n            fullWidth\r\n            label=\"Branch Name\"\r\n            value={branchData.name}\r\n            onChange={(e) => setBranchData({ ...branchData, name: e.target.value })}\r\n            margin=\"normal\"\r\n          />\r\n          <TextField\r\n            fullWidth\r\n            label=\"Sort Code\"\r\n            value={branchData.sort_code}\r\n            onChange={(e) => setBranchData({ ...branchData, sort_code: e.target.value })}\r\n            margin=\"normal\"\r\n          />\r\n          <Row className=\"mt-3\">\r\n            <Col md={6}>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={handleBranchSubmit}>\r\n                Save\r\n              </Button>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Button variant=\"outlined\" color=\"secondary\" onClick={() => setShowEditBranchModal(false)}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n\r\n      {/* Delete Branch Confirmation Modal */}\r\n      <Modal\r\n        open={showDeleteBranchConfirmation}\r\n        onClose={() => setShowDeleteBranchConfirmation(false)}\r\n        style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n      >\r\n        <Card style={{ padding: '20px' }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Are you sure you want to delete this branch?\r\n          </Typography>\r\n          <Row className=\"mt-3\">\r\n            <Col md={6}>\r\n              <Button variant=\"contained\" color=\"error\" onClick={handleDeleteBranch}>\r\n                Delete\r\n              </Button>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Button variant=\"outlined\" color=\"secondary\" onClick={() => setShowDeleteBranchConfirmation(false)}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n\r\n      {/* Delete Confirmation Modal */}\r\n      <Modal\r\n        open={showDeleteConfirmation}\r\n        onClose={() => setShowDeleteConfirmation(false)}\r\n        style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}\r\n      >\r\n        <Card style={{ padding: '20px' }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Are you sure you want to delete this bank?\r\n          </Typography>\r\n          <Row className=\"mt-3\">\r\n            <Col md={6}>\r\n              <Button variant=\"contained\" color=\"error\" onClick={handleDeleteBank}>\r\n                Delete\r\n              </Button>\r\n            </Col>\r\n            <Col md={6}>\r\n              <Button variant=\"outlined\" color=\"secondary\" onClick={() => setShowDeleteConfirmation(false)}>\r\n                Cancel\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Card>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ManageBanksPage;\r\n"],"names":["_ref","_local_user$role","showToast","banks","setBanks","useState","loading","setLoading","showBankModal","setShowBankModal","showBranchModal","setShowBranchModal","showDeleteConfirmation","setShowDeleteConfirmation","showEditBranchModal","setShowEditBranchModal","showDeleteBranchConfirmation","setShowDeleteBranchConfirmation","selectedBank","setSelectedBank","selectedBranch","setSelectedBranch","modalMode","setModalMode","bankData","setBankData","name","branchData","setBranchData","sort_code","branches","setBranches","currentPage","setCurrentPage","local_user","JSON","parse","localStorage","getItem","role_id","parseInt","role","id","useEffect","async","response","api","get","data","error","console","fetchBanks","indexOfLastBank","indexOfFirstBank","currentBanks","slice","handleOpenBankModal","mode","bank","arguments","length","undefined","handleCloseBankModal","_jsx","Spinner","animation","_jsxs","Container","className","children","Row","Col","md","Typography","variant","gutterBottom","Button","color","onClick","FontAwesomeIcon","icon","faPlus","Table","striped","bordered","hover","map","_Fragment","faEdit","handleShowDeleteConfirmation","faTrashAlt","bank_branches","handleOpenBranchModal","faSitemap","Pagination","Array","from","Math","ceil","_","index","Item","active","Modal","open","onClose","style","overflow","Card","width","margin","padding","maxHeight","overflowY","TextField","fullWidth","label","value","onChange","e","target","post","prevBanks","put","handleCloseBranchModal","branch","handleEditBranch","handleShowDeleteBranchConfirmation","display","alignItems","justifyContent","bank_id","is_deleted","prevBranches","delete","filter"],"sourceRoot":""}