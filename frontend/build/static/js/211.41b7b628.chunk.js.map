{"version":3,"file":"static/js/211.41b7b628.chunk.js","mappings":"mVAYAA,EAAAA,GAAMC,YAAYC,EAAAA,IAElB,MAAMC,EAAkB,CACtB,oBACA,uBACA,yBACA,eACA,mBACA,gBACA,YACA,mBACA,gBACA,cACA,sBACA,SACA,kBACA,sBA8OF,EA3OoBC,IAAoB,IAAnB,UAAEC,GAAWD,EAChC,MAAOE,EAASC,IAAcC,EAAAA,EAAAA,UAAS,CAAEC,UAAW,GAAIC,QAAS,GAAIC,YAAa,MAC3EC,EAAYC,IAAiBL,EAAAA,EAAAA,UAAS,KACtCM,EAASC,IAAcP,EAAAA,EAAAA,WAAS,IAChCQ,EAAWC,IAAgBT,EAAAA,EAAAA,UAAS,CAAEU,OAAQ,GAAIC,SAAU,MAC5DC,EAAWC,IAAgBb,EAAAA,EAAAA,UAAS,OACrCc,GAAWC,EAAAA,EAAAA,QAAO,MAgGlBC,EAAsBC,IAC1B,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1BrB,GAAYsB,IAAI,IAAWA,EAAM,CAACH,GAAOC,KAAS,EAG9CG,EAAqBC,IACzB,IAAKA,GAAwB,IAAhBA,EAAKC,OAChB,MAAO,CAAEd,OAAQ,GAAIC,SAAU,IAIjC,MAAMc,EAAS,CAAC,0BAA2B,0BAA2B,0BACtD,0BAA2B,2BAA4B,2BAEvE,MAAO,CACLf,OAAQa,EAAKG,KAAIC,GAAQA,EAAKC,aAAe,YAC7CjB,SAAU,CAAC,CACTkB,MAAO,SACPN,KAAMA,EAAKG,KAAIC,GAAQG,WAAWH,EAAKI,SAAW,IAClDC,gBAAiBP,EAAOQ,MAAM,EAAGV,EAAKC,QACtCU,YAAaT,EAAOQ,MAAM,EAAGV,EAAKC,QAAQE,KAAIS,GAASA,EAAMC,QAAQ,MAAO,OAC5EC,YAAa,IAEhB,EAGH,OACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,mBAAkBC,SAAC,sBAEjCC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACH,UAAU,OAAMC,UACpBC,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CAAAH,UACRC,EAAAA,EAAAA,KAACG,EAAAA,EAAI,CAAAJ,UACHF,EAAAA,EAAAA,MAACO,EAAAA,EAAG,CAAAL,SAAA,EACFC,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,EAAER,UACjBF,EAAAA,EAAAA,MAACM,EAAAA,EAAKK,MAAK,CAACC,UAAU,kBAAiBV,SAAA,EACrCC,EAAAA,EAAAA,KAACG,EAAAA,EAAKO,MAAK,CAAAX,SAAC,gBACZC,EAAAA,EAAAA,KAACG,EAAAA,EAAKQ,QAAO,CAACC,KAAK,OAAOnC,KAAK,YAAYoC,SAAUtC,UAGzDyB,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,EAAER,UACjBF,EAAAA,EAAAA,MAACM,EAAAA,EAAKK,MAAK,CAACC,UAAU,gBAAeV,SAAA,EACnCC,EAAAA,EAAAA,KAACG,EAAAA,EAAKO,MAAK,CAAAX,SAAC,cACZC,EAAAA,EAAAA,KAACG,EAAAA,EAAKQ,QAAO,CAACC,KAAK,OAAOnC,KAAK,UAAUoC,SAAUtC,UAGvDyB,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,EAAER,UACjBF,EAAAA,EAAAA,MAACM,EAAAA,EAAKK,MAAK,CAACC,UAAU,cAAaV,SAAA,EACjCC,EAAAA,EAAAA,KAACG,EAAAA,EAAKO,MAAK,CAAAX,SAAC,kBACZF,EAAAA,EAAAA,MAACM,EAAAA,EAAKQ,QAAO,CAACG,GAAG,SAASrC,KAAK,cAAcoC,SAAUtC,EAAmBwB,SAAA,EACxEC,EAAAA,EAAAA,KAAA,UAAQtB,MAAM,GAAEqB,SAAC,4BACjBC,EAAAA,EAAAA,KAAA,UAAQtB,MAAM,OAAMqB,SAAC,SACpB7C,EAAgB+B,KAAI8B,IACnBf,EAAAA,EAAAA,KAAA,UAAoBtB,MAAOqC,EAAMhB,SAAEgB,EAAMpB,QAAQ,KAAM,MAA1CoB,cAKrBf,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAI,GAAIR,UAAU,sBAAqBC,UAC1CC,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CAACC,QAAQ,UAAUC,QAzJlBC,UACpB,GAAK9D,EAAQG,WAAcH,EAAQI,QAKnC,GAAI,IAAI2D,KAAK/D,EAAQG,WAAa,IAAI4D,KAAK/D,EAAQI,SACjDL,EAAU,UAAW,0CAA2C,eADlE,CAKAU,GAAW,GACX,IACE,MAAMuD,QAAiBC,EAAAA,EAAIC,KAAK,iBAAkB,CAChDlE,QAAS,CACPmE,WAAYnE,EAAQG,UACpBiE,SAAUpE,EAAQI,SAEpBiE,aAAcrE,EAAQK,aAAe,QACpC,CACDiE,OAAQ,CACNC,WAAY,OACZC,QAAS,aACTC,SAAU,IACVC,KAAM,KAIJC,EAAaC,EAAAA,IAAYZ,EAASvC,MAEpCkD,GAAcA,EAAWjD,OAAS,GACpCnB,EAAcoE,GACdhE,EAAaa,EAAkBmD,MAE/B5E,EAAU,OAAQ,0CAA2C,QAC7DQ,EAAc,IAElB,CAAE,MAAOsE,GACPC,QAAQD,MAAM,8BAA+BA,GAC7C9E,EAAU,SAAU,+BAAgC,QACtD,CAAC,QACCU,GAAW,EACb,CAjCA,MAPEV,EAAU,UAAW,sCAAuC,UAwC9D,EA+G8DgF,SAAUvE,EAAQkC,SACjElC,GAAUmC,EAAAA,EAAAA,KAACqC,EAAAA,EAAO,CAACC,UAAU,SAASC,KAAK,OAAU,wBAQlEvC,EAAAA,EAAAA,KAACC,EAAAA,EAAI,CAACH,UAAU,OAAMC,UACpBF,EAAAA,EAAAA,MAACI,EAAAA,EAAKC,KAAI,CAAAH,SAAA,EACRF,EAAAA,EAAAA,MAACM,EAAAA,EAAKK,MAAK,CAACC,UAAU,YAAWV,SAAA,EAC/BC,EAAAA,EAAAA,KAACG,EAAAA,EAAKO,MAAK,CAAAX,SAAC,uBACZF,EAAAA,EAAAA,MAACM,EAAAA,EAAKQ,QAAO,CACXG,GAAG,SACHyB,KAAK,KACL7D,MAAOP,EACP0C,SAAWrC,GAAMJ,EAAaI,EAAEG,OAAOD,OAAOqB,SAAA,EAE9CC,EAAAA,EAAAA,KAAA,UAAQtB,MAAM,MAAKqB,SAAC,eACpBC,EAAAA,EAAAA,KAAA,UAAQtB,MAAM,OAAMqB,SAAC,gBACrBC,EAAAA,EAAAA,KAAA,UAAQtB,MAAM,MAAKqB,SAAC,qBAGxBF,EAAAA,EAAAA,MAAA,OAAK2C,MAAO,CAAEC,SAAU,WAAYC,OAAQ,SAAU3C,SAAA,CACrC,QAAd5B,IAAuB6B,EAAAA,EAAAA,KAAC2C,EAAAA,GAAG,CAACC,IAAKvE,EAAUS,KAAMf,EAAW8E,QAAS,CAAEC,YAAY,KACrE,SAAd3E,IAAwB6B,EAAAA,EAAAA,KAAC+C,EAAAA,GAAI,CAACH,IAAKvE,EAAUS,KAAMf,EAAW8E,QAAS,CAAEC,YAAY,KACvE,QAAd3E,IAAuB6B,EAAAA,EAAAA,KAACgD,EAAAA,GAAG,CAACJ,IAAKvE,EAAUS,KAAMf,EAAW8E,QAAS,CAAEC,YAAY,cAK1F9C,EAAAA,EAAAA,KAAA,OAAKF,UAAU,OAAMC,SAClBpC,EAAWoB,OAAS,GACnBc,EAAAA,EAAAA,MAAAoD,EAAAA,SAAA,CAAAlD,SAAA,EAEEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sCAAqCC,SAAA,EAClDC,EAAAA,EAAAA,KAACkD,EAAAA,QAAO,CAACpE,KAAMnB,EAAYwF,SAAU,qBAAqBpD,UACxDF,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACC,QAAQ,UAASlB,SAAA,EACvBC,EAAAA,EAAAA,KAACoD,EAAAA,EAAe,CAACC,KAAMC,EAAAA,MAAa,sBAGxCzD,EAAAA,EAAAA,MAACmB,EAAAA,EAAM,CAACC,QAAQ,UAAUC,QAtJlBqC,KAClB,MAAMC,EAAM,IAAIC,EAAAA,QAAM,aACtBD,EAAIE,YAAY,IAChBF,EAAIG,KAAK,eAAgB,GAAI,IAC7BH,EAAIE,YAAY,IAGhBF,EAAIG,KAAK,iBAAgB,IAAIvC,MAAOwC,uBAAwB,GAAI,IAChEJ,EAAIG,KAAK,eAAetG,EAAQG,gBAAgBH,EAAQI,UAAW,GAAI,IACvE+F,EAAIE,YAAY,IAGhB,MAAMG,EAAUC,OAAOC,KAAKpG,EAAW,IAAIsB,KAAI+E,IAAG,CAChDC,OAAQD,EACRE,QAASF,EACTG,MAAO,OAITC,IAAUZ,EAAK,CACba,KAAM,CAACR,GACPS,KAAM3G,EAAWsB,KAAIsF,GAAOT,OAAOC,KAAKQ,GAAKtF,KAAI+E,GAAOO,EAAIP,OAC5DQ,OAAQ,GACRC,OAAQ,CAAEC,WAAY,IACtBC,OAAQ,CACNC,SAAU,EACVC,YAAa,EACbC,SAAU,YACVC,UAAW,GACXC,UAAW,CAAC,GAAI,GAAI,IACpBC,UAAW,CAAC,IAAK,IAAK,MAExBC,WAAY,CACVD,UAAW,CAAC,GAAI,IAAK,KACrBE,UAAW,CAAC,IAAK,IAAK,KACtBP,SAAU,EACVQ,UAAW,QAEbC,mBAAoB,CAClBJ,UAAW,CAAC,IAAK,IAAK,MAExBK,MAAO,UACPC,UAAW,UAIb/B,EAAIgC,KAAK,mBAAmB,EAwG8BpD,SAAUvE,EAAQkC,SAAA,CAC/DlC,GAAUmC,EAAAA,EAAAA,KAACqC,EAAAA,EAAO,CAACC,UAAU,SAASC,KAAK,QAAUvC,EAAAA,EAAAA,KAACoD,EAAAA,EAAe,CAACC,KAAMoC,EAAAA,MAAc,uBAI/F5F,EAAAA,EAAAA,MAAC6F,EAAAA,EAAK,CAACC,GAAG,cAAcC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAChD,YAAU,EAAA/C,SAAA,EACvDC,EAAAA,EAAAA,KAAA,SAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAAD,SACG+D,OAAOC,KAAKpG,EAAW,IAAIsB,KAAK+E,IAC/BhE,EAAAA,EAAAA,KAAA,MAAAD,SAAeiE,EAAIrE,QAAQ,KAAM,MAAxBqE,UAIfhE,EAAAA,EAAAA,KAAA,SAAAD,SACGpC,EAAWsB,KAAI,CAACsF,EAAKwB,KACpB/F,EAAAA,EAAAA,KAAA,MAAAD,SACG+D,OAAOkC,OAAOzB,GAAKtF,KAAI,CAACP,EAAOuH,KAC9BjG,EAAAA,EAAAA,KAAA,MAAAD,SAAerB,GAANuH,MAFJF,cAUjB/F,EAAAA,EAAAA,KAAA,KAAAD,SAAG,kCAGH,C","sources":["pages/ReportsPage.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { Table, Button, Form, Row, Col, Spinner, Card } from 'react-bootstrap';\r\nimport api from '../services/api';\r\nimport { CSVLink } from 'react-csv';\r\nimport { Chart, registerables } from 'chart.js';\r\nimport { Bar, Line, Pie } from 'react-chartjs-2';\r\nimport * as d3 from 'd3';\r\nimport jsPDF from 'jspdf'; // Import jsPDF for PDF export\r\nimport autoTable from 'jspdf-autotable'; // Import autoTable for table export in PDF\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFileCsv, faFilePdf } from '@fortawesome/free-solid-svg-icons';\r\n\r\nChart.register(...registerables);\r\n\r\nconst aggregateFields = [\r\n  'sale_manager_name',\r\n  'sales_executive_name',\r\n  'sales_executive_branch',\r\n  'product_name',\r\n  'product_category',\r\n  'product_group',\r\n  'bank_name',\r\n  'bank_branch_name',\r\n  'paypoint_name',\r\n  'source_type',\r\n  'collection_platform',\r\n  'status',\r\n  'customer_called',\r\n  'momo_first_premium'\r\n];\r\n\r\nconst ReportsPage = ({ showToast }) => {\r\n  const [filters, setFilters] = useState({ startDate: '', endDate: '', aggregateBy: '' });\r\n  const [reportData, setReportData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [chartData, setChartData] = useState({ labels: [], datasets: [] });\r\n  const [chartType, setChartType] = useState('bar');\r\n  const chartRef = useRef(null); // Ref for capturing chart\r\n\r\n  const handlePreview = async () => {\r\n    if (!filters.startDate || !filters.endDate) {\r\n      showToast('warning', 'Please fill in all required fields.', 'Warning');\r\n      return;\r\n    }\r\n\r\n    if (new Date(filters.startDate) > new Date(filters.endDate)) {\r\n      showToast('warning', 'End date must be later than start date.', 'Warning');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      const response = await api.post('/reports/sales', {\r\n        filters: {\r\n          start_date: filters.startDate,\r\n          end_date: filters.endDate,\r\n        },\r\n        aggregate_by: filters.aggregateBy || 'None',\r\n      }, {\r\n        params: {\r\n          sort_order: 'desc',\r\n          sort_by: 'created_at',\r\n          per_page: 100000,\r\n          page: 1,\r\n        },\r\n      });\r\n\r\n      const parsedData = d3.csvParse(response.data);\r\n\r\n      if (parsedData && parsedData.length > 0) {\r\n        setReportData(parsedData);\r\n        setChartData(generateChartData(parsedData));\r\n      } else {\r\n        showToast('info', 'No data found for the selected filters.', 'Info');\r\n        setReportData([]);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching report data:\", error);\r\n      showToast('danger', 'Failed to fetch report data.', 'Error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const exportToPDF = () => {\r\n    const doc = new jsPDF('landscape'); // Set to landscape orientation\r\n    doc.setFontSize(22);\r\n    doc.text('Sales Report', 14, 20); // Title\r\n    doc.setFontSize(12);\r\n\r\n    // Adding some space before the table\r\n    doc.text(`Report Date: ${new Date().toLocaleDateString()}`, 14, 30);\r\n    doc.text(`Date Range: ${filters.startDate} to ${filters.endDate}`, 14, 40);\r\n    doc.setFontSize(10);\r\n\r\n    // Prepare the data for the table\r\n    const columns = Object.keys(reportData[0]).map(key => ({\r\n      header: key,\r\n      dataKey: key,\r\n      width: 30 // Adjust width to fit more data\r\n    }));\r\n\r\n    // Generate the auto table\r\n    autoTable(doc, {\r\n      head: [columns],\r\n      body: reportData.map(row => Object.keys(row).map(key => row[key])),\r\n      startY: 50,\r\n      margin: { horizontal: 10 },\r\n      styles: {\r\n        fontSize: 8, // Smaller font size for better fit\r\n        cellPadding: 2, // Reduced padding for smaller row height\r\n        overflow: 'linebreak',\r\n        lineWidth: 0.5,\r\n        lineColor: [44, 62, 80],\r\n        fillColor: [244, 244, 244],\r\n      },\r\n      headStyles: {\r\n        fillColor: [52, 152, 219], // Header color\r\n        textColor: [255, 255, 255],\r\n        fontSize: 9,\r\n        fontStyle: 'bold',\r\n      },\r\n      alternateRowStyles: {\r\n        fillColor: [220, 220, 220], // Alternate row color\r\n      },\r\n      theme: 'striped', // Add striping for better readability\r\n      pageBreak: 'avoid', // Prevent page breaks within rows\r\n    });\r\n\r\n    // Save the document\r\n    doc.save('sales_report.pdf');\r\n  };\r\n\r\n  const handleFilterChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFilters((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const generateChartData = (data) => {\r\n    if (!data || data.length === 0) {\r\n      return { labels: [], datasets: [] };\r\n    }\r\n\r\n    // Generate different colors for the bars\r\n    const colors = ['rgba(255, 99, 132, 0.5)', 'rgba(54, 162, 235, 0.5)', 'rgba(255, 206, 86, 0.5)',\r\n                    'rgba(75, 192, 192, 0.5)', 'rgba(153, 102, 255, 0.5)', 'rgba(255, 159, 64, 0.5)'];\r\n\r\n    return {\r\n      labels: data.map(item => item.client_name || 'Unknown'),\r\n      datasets: [{\r\n        label: 'Amount',\r\n        data: data.map(item => parseFloat(item.amount) || 0),\r\n        backgroundColor: colors.slice(0, data.length), // Limit colors based on the number of data points\r\n        borderColor: colors.slice(0, data.length).map(color => color.replace('0.5', '1')), // Darker borders\r\n        borderWidth: 1,\r\n      }],\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div className=\"container mt-5\">\r\n      <h2 className=\"text-center mb-4\">Generate Reports</h2>\r\n\r\n      <Card className=\"mb-4\">\r\n        <Card.Body>\r\n          <Form>\r\n            <Row>\r\n              <Col xs={12} md={4}>\r\n                <Form.Group controlId=\"filterStartDate\">\r\n                  <Form.Label>Start Date</Form.Label>\r\n                  <Form.Control type=\"date\" name=\"startDate\" onChange={handleFilterChange} />\r\n                </Form.Group>\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Form.Group controlId=\"filterEndDate\">\r\n                  <Form.Label>End Date</Form.Label>\r\n                  <Form.Control type=\"date\" name=\"endDate\" onChange={handleFilterChange} />\r\n                </Form.Group>\r\n              </Col>\r\n              <Col xs={12} md={4}>\r\n                <Form.Group controlId=\"aggregateBy\">\r\n                  <Form.Label>Aggregate By</Form.Label>\r\n                  <Form.Control as=\"select\" name=\"aggregateBy\" onChange={handleFilterChange}>\r\n                    <option value=\"\">Select Aggregate Field</option>\r\n                    <option value=\"none\">None</option>\r\n                    {aggregateFields.map(field => (\r\n                      <option key={field} value={field}>{field.replace(/_/g, ' ')}</option>\r\n                    ))}\r\n                  </Form.Control>\r\n                </Form.Group>\r\n              </Col>\r\n              <Col xs={12} className=\"align-self-end mt-2\">\r\n                <Button variant=\"primary\" onClick={handlePreview} disabled={loading}>\r\n                  {loading ? <Spinner animation=\"border\" size=\"sm\" /> : 'Preview'}\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <Card className=\"mt-4\">\r\n        <Card.Body>\r\n          <Form.Group controlId=\"chartType\">\r\n            <Form.Label>Select Chart Type</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              size=\"sm\"\r\n              value={chartType}\r\n              onChange={(e) => setChartType(e.target.value)}\r\n            >\r\n              <option value=\"bar\">Bar Chart</option>\r\n              <option value=\"line\">Line Chart</option>\r\n              <option value=\"pie\">Pie Chart</option>\r\n            </Form.Control>\r\n          </Form.Group>\r\n          <div style={{ position: 'relative', height: '400px' }}>\r\n            {chartType === 'bar' && <Bar ref={chartRef} data={chartData} options={{ responsive: true }} />}\r\n            {chartType === 'line' && <Line ref={chartRef} data={chartData} options={{ responsive: true }} />}\r\n            {chartType === 'pie' && <Pie ref={chartRef} data={chartData} options={{ responsive: true }} />}\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <div className=\"mt-4\">\r\n        {reportData.length > 0 ? (\r\n          <>\r\n            {/* Buttons for CSV and PDF downloads above the table */}\r\n            <div className=\"d-flex justify-content-between mb-3\">\r\n              <CSVLink data={reportData} filename={\"report_preview.csv\"}>\r\n                <Button variant=\"success\">\r\n                  <FontAwesomeIcon icon={faFileCsv} /> Download CSV\r\n                </Button>\r\n              </CSVLink>\r\n              <Button variant=\"primary\" onClick={exportToPDF} disabled={loading}>\r\n                {loading ? <Spinner animation=\"border\" size=\"sm\" /> : <FontAwesomeIcon icon={faFilePdf} />} Download PDF\r\n              </Button>\r\n            </div>\r\n\r\n            <Table id=\"reportTable\" striped bordered hover responsive>\r\n              <thead>\r\n                <tr>\r\n                  {Object.keys(reportData[0]).map((key) => (\r\n                    <th key={key}>{key.replace(/_/g, ' ')}</th> // Replace underscores with spaces for display\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {reportData.map((row, index) => (\r\n                  <tr key={index}>\r\n                    {Object.values(row).map((value, idx) => (\r\n                      <td key={idx}>{value}</td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </Table>\r\n          </>\r\n        ) : (\r\n          <p>No report data available.</p>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportsPage;\r\n\r\n"],"names":["Chart","register","registerables","aggregateFields","_ref","showToast","filters","setFilters","useState","startDate","endDate","aggregateBy","reportData","setReportData","loading","setLoading","chartData","setChartData","labels","datasets","chartType","setChartType","chartRef","useRef","handleFilterChange","e","name","value","target","prev","generateChartData","data","length","colors","map","item","client_name","label","parseFloat","amount","backgroundColor","slice","borderColor","color","replace","borderWidth","_jsxs","className","children","_jsx","Card","Body","Form","Row","Col","xs","md","Group","controlId","Label","Control","type","onChange","as","field","Button","variant","onClick","async","Date","response","api","post","start_date","end_date","aggregate_by","params","sort_order","sort_by","per_page","page","parsedData","d3","error","console","disabled","Spinner","animation","size","style","position","height","Bar","ref","options","responsive","Line","Pie","_Fragment","CSVLink","filename","FontAwesomeIcon","icon","faFileCsv","exportToPDF","doc","jsPDF","setFontSize","text","toLocaleDateString","columns","Object","keys","key","header","dataKey","width","autoTable","head","body","row","startY","margin","horizontal","styles","fontSize","cellPadding","overflow","lineWidth","lineColor","fillColor","headStyles","textColor","fontStyle","alternateRowStyles","theme","pageBreak","save","faFilePdf","Table","id","striped","bordered","hover","index","values","idx"],"sourceRoot":""}