{"version":3,"file":"static/js/379.c76e1b76.chunk.js","mappings":"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","sources":["pages/LogsPage.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Table, Spinner, Row, Col, Button, Form } from 'react-bootstrap';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport api from '../services/api';\r\nimport { FaSearch, FaArrowLeft, FaArrowRight, FaAngleDoubleLeft, FaAngleDoubleRight, FaUndo } from 'react-icons/fa';\r\n\r\nconst LogsPage = ({ showToast }) => {\r\n  const [logs, setLogs] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [filter, setFilter] = useState({\r\n    type: '',\r\n    level: '',\r\n    startDate: null,\r\n    endDate: null,\r\n  });\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [itemsPerPage] = useState(50);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n\r\n  const fetchLogs = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      const params = {\r\n        page: currentPage,\r\n        per_page: itemsPerPage,\r\n        ...(filter.type && { type: filter.type }),\r\n        ...(filter.level && { level: filter.level }),\r\n        ...(filter.startDate && { start_date: filter.startDate.toISOString() }), // include full timestamp\r\n        ...(filter.endDate && { end_date: filter.endDate.toISOString() }), // include full timestamp\r\n      };\r\n\r\n      const response = await api.get('/logs/', { params });\r\n      setLogs(response.data.logs || []);\r\n      setTotalPages(response.data.total_pages || 1);\r\n    } catch (error) {\r\n      console.error('Error fetching logs:', error);\r\n      let errorMessage = 'Failed to fetch logs. Please try again later.';\r\n      if (error.response) {\r\n        errorMessage = error.response.data.message || errorMessage;\r\n      } else if (error.request) {\r\n        errorMessage = 'Network error: Unable to reach the server.';\r\n      }\r\n      setError(errorMessage);\r\n      showToast('danger', errorMessage, 'Error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentPage, itemsPerPage, filter, showToast]);\r\n\r\n  useEffect(() => {\r\n    fetchLogs();\r\n  }, [fetchLogs]);\r\n\r\n  const handleFilter = () => {\r\n    // Ensure startDate and endDate logic works correctly\r\n    if (filter.startDate && filter.endDate && filter.startDate > filter.endDate) {\r\n      showToast('warning', 'Start date must be before end date.', 'Invalid Date Range');\r\n      return;\r\n    }\r\n    setCurrentPage(1); // Reset to first page on filter change\r\n    fetchLogs(); // Fetch logs with the new filters\r\n  };\r\n\r\n  const handleResetFilters = () => {\r\n    setFilter({ type: '', level: '', startDate: null, endDate: null });\r\n    setCurrentPage(1);\r\n    fetchLogs();\r\n  };\r\n\r\n  const handlePageChange = (pageNumber) => {\r\n    if (pageNumber < 1 || pageNumber > totalPages) return; // Prevent out-of-bounds pagination\r\n    setCurrentPage(pageNumber);\r\n  };\r\n\r\n  const maxPageNumbers = 5;\r\n  const startPage = Math.max(1, currentPage - Math.floor(maxPageNumbers / 2));\r\n  const endPage = Math.min(totalPages, startPage + maxPageNumbers - 1);\r\n\r\n  // Function to parse log entries\r\n  const parseLogEntry = (logEntry) => {\r\n    const timestampRegex = /(\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3})/;\r\n    const matches = logEntry.match(timestampRegex);\r\n\r\n    if (matches) {\r\n      const timestamp = matches[0];\r\n      const message = logEntry.replace(timestampRegex, '').trim();\r\n      const dateObject = new Date(timestamp.replace(',', '.')); // Replace comma with dot for JS date parsing\r\n      return {\r\n        timestamp: isNaN(dateObject.getTime()) ? 'Invalid Date' : dateObject,\r\n        message,\r\n      };\r\n    }\r\n\r\n    return { timestamp: 'No Timestamp', message: logEntry }; // No timestamp\r\n  };\r\n\r\n  const parsedLogs = logs.map(log => parseLogEntry(log));\r\n\r\n  return (\r\n    <div style={{ marginTop: '20px', padding: '20px' }}>\r\n      <Row className=\"mb-4\">\r\n        <Col>\r\n          <h2>Logs</h2>\r\n        </Col>\r\n      </Row>\r\n\r\n      <Form className=\"mb-4\">\r\n        <Row className=\"align-items-end\">\r\n          <Col xs={12} md={3} lg={2}>\r\n            <Form.Control\r\n              as=\"select\"\r\n              value={filter.type}\r\n              onChange={(e) => setFilter({ ...filter, type: e.target.value })}\r\n              aria-label=\"Log Type\"\r\n            >\r\n              <option value=\"\">Log Type</option>\r\n              <option value=\"general\">General</option>\r\n              <option value=\"error\">Error</option>\r\n              <option value=\"success\">Success</option>\r\n            </Form.Control>\r\n          </Col>\r\n          <Col xs={12} md={3} lg={2}>\r\n            <Form.Control\r\n              as=\"select\"\r\n              value={filter.level}\r\n              onChange={(e) => setFilter({ ...filter, level: e.target.value })}\r\n              aria-label=\"Log Level\"\r\n            >\r\n              <option value=\"\">Log Level</option>\r\n              <option value=\"INFO\">INFO</option>\r\n              <option value=\"WARNING\">WARNING</option>\r\n              <option value=\"ERROR\">ERROR</option>\r\n            </Form.Control>\r\n          </Col>\r\n          <Col xs={12} md={3} lg={2}>\r\n            <DatePicker\r\n              selected={filter.startDate}\r\n              onChange={(date) => setFilter({ ...filter, startDate: date })}\r\n              placeholderText=\"Start Date\"\r\n              className=\"form-control\"\r\n              aria-label=\"Start Date\"\r\n              showTimeSelect // Enables time selection\r\n              dateFormat=\"Pp\" // Formats the date and time display\r\n            />\r\n          </Col>\r\n          <Col xs={12} md={3} lg={2}>\r\n            <DatePicker\r\n              selected={filter.endDate}\r\n              onChange={(date) => setFilter({ ...filter, endDate: date })}\r\n              placeholderText=\"End Date\"\r\n              className=\"form-control\"\r\n              aria-label=\"End Date\"\r\n              showTimeSelect // Enables time selection\r\n              dateFormat=\"Pp\" // Formats the date and time display\r\n            />\r\n          </Col>\r\n          <Col xs={12} md={3} lg={2}>\r\n            <Button variant=\"primary\" onClick={handleFilter} aria-label=\"Filter Logs\">\r\n              <FaSearch /> Filter\r\n            </Button>\r\n            <Button variant=\"secondary\" onClick={handleResetFilters} className=\"ms-2\" aria-label=\"Reset Filters\">\r\n              <FaUndo /> Reset\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Form>\r\n\r\n      {error && <p className=\"text-center text-danger\">{error}</p>}\r\n      {loading && <div className=\"text-center my-3\"><Spinner animation=\"border\" aria-label=\"Loading logs...\" /></div>}\r\n\r\n      {!loading && (\r\n        <Table striped bordered hover responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>#</th>\r\n              <th>Timestamp</th>\r\n              <th>Message</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {parsedLogs.length > 0 ? (\r\n              parsedLogs.map((log, index) => (\r\n                <tr key={index}>\r\n                  <td>{(currentPage - 1) * itemsPerPage + index + 1}</td>\r\n                  <td>{typeof log.timestamp === 'string' ? log.timestamp : log.timestamp.toLocaleString()}</td>\r\n                  <td>{log.message}</td>\r\n                </tr>\r\n              ))\r\n            ) : (\r\n              <tr>\r\n                <td colSpan=\"3\" className=\"text-center\">No logs found</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      )}\r\n\r\n      {!loading && totalPages > 1 && (\r\n        <Row className=\"mt-3\">\r\n          <Col className=\"text-center\">\r\n            {currentPage > 1 && (\r\n              <>\r\n                <Button variant=\"secondary\" onClick={() => handlePageChange(1)} className=\"mx-1\" aria-label=\"First Page\">\r\n                  <FaAngleDoubleLeft />\r\n                </Button>\r\n                <Button variant=\"secondary\" onClick={() => handlePageChange(currentPage - 1)} className=\"mx-1\" aria-label=\"Previous Page\">\r\n                  <FaArrowLeft />\r\n                </Button>\r\n              </>\r\n            )}\r\n            {[...Array(endPage - startPage + 1).keys()].map((number) => (\r\n              <Button\r\n                key={startPage + number}\r\n                variant={currentPage === startPage + number ? 'primary' : 'secondary'}\r\n                onClick={() => handlePageChange(startPage + number)}\r\n                className=\"mx-1\"\r\n                aria-label={`Page ${startPage + number}`}\r\n              >\r\n                {startPage + number}\r\n              </Button>\r\n            ))}\r\n            {currentPage < totalPages && (\r\n              <>\r\n                <Button variant=\"secondary\" onClick={() => handlePageChange(currentPage + 1)} className=\"mx-1\" aria-label=\"Next Page\">\r\n                  <FaArrowRight />\r\n                </Button>\r\n                <Button variant=\"secondary\" onClick={() => handlePageChange(totalPages)} className=\"mx-1\" aria-label=\"Last Page\">\r\n                  <FaAngleDoubleRight />\r\n                </Button>\r\n              </>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LogsPage;\r\n"],"names":["_ref","showToast","logs","setLogs","useState","loading","setLoading","error","setError","filter","setFilter","type","level","startDate","endDate","currentPage","setCurrentPage","itemsPerPage","totalPages","setTotalPages","fetchLogs","useCallback","async","params","page","per_page","start_date","toISOString","end_date","response","api","get","data","total_pages","console","errorMessage","message","request","useEffect","handlePageChange","pageNumber","startPage","Math","max","floor","maxPageNumbers","endPage","min","parsedLogs","map","log","logEntry","timestampRegex","matches","match","timestamp","replace","trim","dateObject","Date","isNaN","getTime","parseLogEntry","_jsxs","style","marginTop","padding","children","_jsx","Row","className","Col","Form","xs","md","lg","Control","as","value","onChange","e","target","DatePicker","selected","date","placeholderText","showTimeSelect","dateFormat","Button","variant","onClick","handleFilter","FaSearch","handleResetFilters","FaUndo","Spinner","animation","Table","striped","bordered","hover","responsive","length","index","toLocaleString","colSpan","_Fragment","FaAngleDoubleLeft","FaArrowLeft","Array","keys","number","FaArrowRight","FaAngleDoubleRight"],"sourceRoot":""}